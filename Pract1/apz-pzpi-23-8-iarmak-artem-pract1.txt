Харківський національний університет радіоелектроніки
Факультет комп’ютерних наук
Кафедра програмної інженерії






ЗВІТ
до практичного заняття №1
з дисципліни «Аналіз та рефакторинг коду»
На тему: «Правила оформлення програмного коду PHP PSR-12»












Виконав:                                                                   
ст. гр. ПЗПІ-23-8                                                        
Ярмак Артем Миколайович                                     


Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович












Харкiв 2025
1 ІСТОРІЯ ЗМІН


№
	Дата
	Версія звіту
	Опис змін та виправлень
	1
	21.10.2025
	0.1
	Створено розділ завдання
	2
	22.10.2025
	0.2
	Створено розділ “Опис виконаної роботи”
	________________


2 ЗАВДАННЯ


1. Вступ: Важливість правил оформлення коду
2. Структура коду
3. Форматування коду
4. Іменування (іменування змінних, функцій, класів)
5. Коментарі
6. Документування коду
7. Конвенції стилю кодування для PHP
8. Кодування на основі тестування (Test-Driven Development)
9. Інструменти та автоматизація для підтримки якості коду
10. Приклади оформлення коду: аналіз та обговорення
________________


3 ОПИС ВИКОНАНОЇ РОБОТИ
3.1 Вступ: Важливість правил оформлення коду


Правила оформлення коду, — це не просто набір рекомендацій для краси. Це фундаментальний інструмент, який забезпечує узгодженість, читабельність та підтримуваність коду в проєктах, особливо при командній роботі.
Коли всі члени команди дотримуються єдиного стандарту, код стає передбачуваним. Розробникам не потрібно витрачати час на дешифрування стилю колеги, вони можуть одразу зосередитися на логіці та архітектурі.
Дотримання PSR-12 надає такі переваги:
* читабельність: Розробнику не потрібно щоразу розшифровувати новий стиль, він може миттєво зрозуміти код і зосереджуватися на потрібній задачі, а не на синтаксисі.
* підтримуваність: Код, написаний сьогодні за стандартом, буде легше зрозуміти та модифікувати через рік, навіть якщо команда повністю змінилася.
* ефективність код-рев’ю: Перевірка коду колег стає швидшою та якіснішою. Замість коментарів про неправильне оформлення, обговорення фокусується на архітектурі та правильності реалізації.


3.2 Структура коду


PSR-12 чітко визначає, як має бути структурований PHP-файл, забезпечуючи однаковий порядок елементів у всьому проєкті.
Основні правила структури файлу:
* усі PHP-файли повинні використовувати лише відкриваючий тег <?php на початку. Закриваючий тег ?> заборонений у файлах, що містять виключно PHP.
* кодування файлу повинно бути UTF-8
* порядок елементів
   * Відкриваючий тег <?php.
   * Оголошення namespace (після нього має бути один порожній рядок).
   * Блоки use.
   * Блоки use function.
   * Блоки use const.
   * Решта коду
* кожне оголошення use повинно бути на окремому рядку і не повинно починатися зі зворотного слеша ( \ ).


Приклад поганої та доброї структури файлу:


// Погано
<?php
use MyProject\Services\UserService;


namespace MyProject\Controllers;
use MyProject\Exceptions\UserNotFoundException;


class UserController { /* ... */ }
?>


// Добре
<?php


namespace MyProject\Controllers;


use MyProject\Exceptions\UserNotFoundException;
use MyProject\Services\UserService;


class UserController
{
    // ...
}
3.3 Форматування коду


Форматування — це візуальні правила, які роблять код однорідним.
* Відступи: Використовуйте 4 пробіли для відступів. Табуляція (tabs) заборонена.
* Довжина рядка: Немає жорсткого обмеження, але рекомендована межа — 120 символів. Довші рядки слід розбивати на кілька.
* Керуючі конструкції (if, foreach, while):
   * Після ключового слова повинен бути один пробіл.
   * Відкриваюча фігурна дужка { повинна бути на тому ж рядку.
   * Закриваюча фігурна дужка } повинна бути на новому рядку після тіла.
* Фігурні дужки для класів та методів:
   * Відкриваюча дужка { повинна бути на новому рядку після імені класу або методу.
   * Закриваюча дужка } повинна бути на новому рядку після тіла.
* Пробіли:
   * Один пробіл навколо бінарних операторів (+, -, ==, !=, =>, && тощо).
   * Немає пробілу перед комою (,) або крапкою з комою (;).
   * Є один пробіл після коми.
   * Немає пробілів після відкриваючої та перед закриваючою круглою дужкою ().
   * Приклад поганого та доброго форматування:


// Погано
class User
{
    function update( $data )
    {
        if($data['name']!=null)
        {
            $this->name=$data['name'];
        }
        else
        {
            return false;
        }
    }
}


// Добре
class User
{
    public function update(array $data): bool
    {
        if ($data['name'] !== null) {
            $this->name = $data['name'];
        } else {
            return false;
        }


        return true;
    }
}


3.4 Іменування (іменування змінних, функцій, класів)


Правильне найменування — це основа коду, що "самодокументується". PSR-12 встановлює чіткі правила.
* класи (Classes), Інтерфейси (Interfaces), Трейти (Traits): Повинні бути у стилі PascalCase.
* константи класу (Class Constants): Повинні бути у стилі UPPER_CASE_WITH_UNDERSCORES.
* методи (Methods), властивості (Properties) та змінні (Variables): Повинні бути у стилі camelCase.
* ключові слова PHP: Всі ключові слова (if, else, true, false, null, static, public) повинні бути в нижньому регістрі.


Приклад поганого та доброго іменування:


// Погано
class user_manager {
    const default_role = 'guest';
    public $UserName;
   
    function Process_Data(array $DATA) {
        $IS_VALID = TRUE;
        // ...
    }
}


// Добре
class UserManager
{
    public const DEFAULT_ROLE = 'guest';
    public string $userName;
   
    public function processData(array $data): void
    {
        $isValid = true;
        // ...
    }
}


3.5 Коментарі


Коментарі — це допоміжний інструмент, який існує для того, щоб пояснити наміри розробника. У стандарті PSR-12 вони форматуються за допомогою // для однорядкових коментарів або /* ... */ для багаторядкових.
Де розміщувати:
* коментар повинен розміщуватися на новому рядку, безпосередньо над блоком коду, який він описує.
* PSR-12 не рекомендує коментарі в кінці рядка, оскільки вони можуть погіршувати читабельність.
Коли коментарі потрібні (і корисні):
* пояснення бізнес-логіки: Коли код реалізує складне бізнес-правило, яке неможливо виразити іменами змінних.
* попередження про "пастки": Якщо певна частина коду має неочевидні побічні ефекти або залежності.
* системні теги: Для автоматизованих інструментів та планування:
   * // TODO: — Позначка для завдання, яке потрібно виконати в майбутньому
   * // FIXME: — Позначка для відомої проблеми або бага, який потрібно виправити


Приклад поганого та доброго коментування:


// Погано
class DataProcessor
{
    // Функція для обробки
    public function process($data)
    {
        // $oldResult = $data->processOld();
        $result = $data->process(); // Отримуємо результат


        if ($result > 10) { // Якщо результат більше 10
            return true; // Повернути true
        }
    }
}


// Добре
class UserReportGenerator
{
    // TODO: Перенести логіку в окремий сервіс ReportBuilder
    public function generate(User $user): Report
    {
        // Облікові записи гостей не мають розширених звітів,
        // щоб уникнути навантаження на БД.
        if ($user->isGuest()) {
            return Report::createEmpty($user);
        }


        $reportData = $this->fetchDataForUser($user);


        return Report::createFromData($reportData);
    }
}


3.6 Документування коду


Документування — це формалізовані коментарі (DocBlocks), які описують, що робить код, які параметри він приймає та що повертає. PSR-12 вимагає їх використання для всіх класів, методів та функцій.
* DocBlocks повинні починатися з /** і закінчуватися */.
* вони повинні розміщуватися безпосередньо перед елементом, який вони документують.
* використовуйте теги @param, @return та @throws для опису аргументів, значень, що повертаються, та можливих винятків.


Приклад документування коду:


/**
 * Отримує користувача з бази даних за його ID.
 *
 * @param int $userId ID користувача, якого потрібно знайти.
 *
 * @return User Повертає об'єкт User.
 * @throws UserNotFoundException Якщо користувача з таким ID не знайдено.
 */
public function getUserById(int $userId): User
{
    $user = $this->repository->find($userId);


    if ($user === null) {
        throw new UserNotFoundException('User not found');
    }
   
    return $user;
}


3.7 Конвенції стилю кодування для PHP


PSR-12 уточнює багато аспектів, специфічних для мови PHP, особливо в об'єктно-орієнтованому контексті.
* Visibility: Модифікатори public, protected або private повинні бути оголошені для всіх властивостей та методів. Використання застарілого ключового слова var для властивостей заборонено.


// Погано
class User
{
    var $name;


    function getProfile()
    {
        // ...
    }
}


// Добре
class User
{
    public string $name;


    public function getProfile(): array
    {
        // ...
    }
}


* Структури if / elseif / else
   * Потрібно використовувати elseif замість else if (в два слова).
   * Фігурна дужка для else або elseif повинна бути на тому ж рядку, що й закриваюча дужка } попереднього блоку, відокремлена одним пробілом.


// Погано
if ($a > 10) {
    // ...
}
else if ($a > 5) {
    // ...
}
else
{
    // ...
}


// Добре
if ($a > 10) {
    // ...
} elseif ($a > 5) {
    // ...
} else {
    // ...
}


* Типи, що допускають null (Nullable Types) При використанні типів, що допускають null, знак питання ? не повинен мати пробілу між ним та іменем типу.


// Погано
public function findUser(int $id): ? User
{
    // ...
}


// Добре
public function findUser(int $id): ?User
{
    // ...
}


3.8 Кодування на основі тестування (Test-Driven Development)


Test-Driven Development (TDD) — це методологія розробки, а не частина стандарту PSR-12. TDD — це цикл "Червоний-Зелений-Рефакторинг":
* Red (Червоний): Написати тест, який не проходить (бо коду ще немає).
* Green (Зелений): Написати мінімальний код, щоб тест пройшов.
* Refactor (Рефакторинг): Покращити код, не ламаючи тест.
Хоча PSR-12 не диктує, як писати логіку, він відіграє критичну роль у TDD. PSR-12 гарантує, що ваш тестовий код є таким же чистим і читабельним, як і основний код.
Коли ви пишете тести (наприклад, у PHPUnit), вони також мають відповідати PSR-12. Це робить тести "живою документацією", яку легко читати та підтримувати. На етапі "Refactor" стандарт PSR-12 допомагає зберегти структуру коду, поки ви покращуєте його реалізацію.


Приклад тесту (PHPUnit), оформленого за PSR-12:


namespace Tests\Unit;


use App\Calculator;
use PHPUnit\Framework\TestCase;


class CalculatorTest extends TestCase
{
    @return void


    public function testAddsTwoNumbers(): void
    {
        $calculator = new Calculator();
       
        $result = $calculator->add(5, 10);
       
        $this->assertEquals(15, $result);
    }
}


3.9 Інструменти та автоматизація для підтримки якості коду


Дотримуватися PSR-12 вручну — марна трата часу. Тому існують інструменти, які роблять цю роботу за тебе, забезпечуючи однаковий стиль у всієї команди.
Для автоматичної перевірки стилю PSR-12 у світі PHP є два ключові інструменти. PHP_CodeSniffer (phpcs) — це лінтер. Він перевіряє, чи дотримуєшся ти правил: чи ті відступи, чи на місці фігурні дужки, чи правильні імена. Він лише знаходить помилки. Другий інструмент — PHP CS Fixer. Це автоматичний форматер. Він не просто скаржиться, а бере і сам виправляє твій код: розставляє пробіли, переносить рядки, виправляє регістр
Найпростіший рівень автоматизації — це Git Hooks. Вони спрацьовують в певні моменти роботи з Git, найчастіше — pre-commit. Коли ти робиш коміт, автоматично запускаються phpcs або php-cs-fixer для змінених файлів. Якщо щось не так – коміт просто не пройде. Це змушує виправляти проблеми відразу, а не накопичувати їх.
Другий рівень — це CI/CD. Це перевірка вже на сервері, коли ти створюєш pull request. Якщо ти якось пропустив помилку стилю локально, CI-пайплайн запустить phpcs, знайде її і "завалить" збірку. Ти не зможеш додати свій код в основну гілку, доки не виправиш стиль.


3.10 Приклади оформлення коду: аналіз та обговорення


Давайте розглянемо типовий PHP-клас до та після застосування PSR-12, щоб підсумувати всі правила.
Поганий приклад:
// Погано
<?php
class user_controller {
    var $db;
    function __construct($DB) {
        $this->db=$DB;
    }
   
    public function GetUser($id)
    {
        if($id < 1){ return NULL; }
        $data = $this->db->query("SELECT * FROM users WHERE id = " . $id);
        return $data;
    }
}
?>


Проблеми:
* Ім'я класу user_controller (має бути PascalCase).
* Використання var замість public/private.
* Ім'я методу GetUser (має бути camelCase).
* Ім'я аргументу $DB (має бути camelCase).
* Фігурна дужка методу на новому рядку.
* Фігурна дужка if на тому ж рядку, що й умова (це ОК, але сам if не відформатований).
* Відсутні пробіли навколо операторів =, <, ..
* Використання NULL замість null.
* Наявність закриваючого тегу ?>.
* Відсутні namespace, use, DocBlocks та вказівки типів.


Хороший приклад:


// Добре
<?php


namespace App\Controllers;


use App\Database\Connection;
use App\Models\User;


class UserController
{
    private Connection $db;
   
    public function __construct(Connection $db)
    {
        $this->db = $db;
    }


    public function getUser(int $id): ?User
    {
        if ($id < 1) {
            return null;
        }
       
        $data = $this->db->findUser($id);
       
        return $data ? new User($data) : null;
    }
}


Покращення:
* Структура: Правильні namespace та use.
* Форматування: Всі відступи (4 пробіли), дужки та пробіли на своїх місцях.
* Іменування: UserController, getUser, $db відповідають стандарту.
* Код чистий, структурований, його легко читати, перевіряти та підтримувати




Як чистота коду впливає на швидкість розуміння:
Коли розробник дивиться на поганий приклад, його мозок витрачає ресурси не на вирішення бізнес-задач, а на дешифрування коду. У хорошому ж прикладі код передбачуваний, розробник не думає про стиль, вся його увага зосереджена на логіці. Чистота коду вивільняє розумові ресурси для вирішення самої проблеми, а не боротьби з кодом.
________________
4 ВИСНОВКИ


Дотримання стандарту PSR-12 є фундаментальною практикою для сучасної PHP-розробки. Це не просто питання естетики, а ключовий інструмент для забезпечення якості та довгострокової підтримки проєкту.
* Не намагайтеся вивчити все напам'ять. Важливо зрозуміти принципи, а не зубрити кожне правило. Дозвольте інструментам робити механічну роботу.
* Використовуйте інструменти. Найефективніший спосіб застосування PSR-12 — це автоматизація. Встановіть PHP_CodeSniffer (phpcs) для пошуку помилок та PHP CS Fixer для їх автоматичного виправлення.
________________
5 ВИКОРИСТАНІ ДЖЕРЕЛА


   1. PSR-12: Extended Coding Style [Електронний ресурс] / PHP Framework Interop Group. URL: https://www.php-fig.org/psr/psr-12/ (дата звернення: 22.10.2025).
   2. PHP_CodeSniffer [Електронний ресурс] / Squiz Labs. URL: https://github.com/squizlabs/PHP_CodeSniffer (дата звернення: 22.10.2025).
   3. PHP Coding Standards Fixer [Електронний ресурс] / FriendsOfPHP. URL: https://cs.symfony.com/ (дата звернення: 22.10.2025).
________________
ДОДАТОК А
Відеозапис
Відеозапис доповіді: https://www.youtube.com/watch?v=DrVVATKiE4s
Хронологічний опис відеозапису:
00:00 - 00:36 Привітання
00:36 - 01:33 Вступ
01:33 - 02:38 Важливість правил оформлення коду
02:38 - 03:25 Структура PHP файлу
03:25 - 04:26 Форматування коду
04:26 - 05:07 Правила іменування
05:07 - 06:11 Коментарі та документування коду
06:11 - 07:00 Специфічні конвенції мови PHP
07:00 - 07:47 Взаємодія PSR-12 та Test-Driven Development (TDD)
07:47 - 08:29 Інструменти та автоматизація для підтримки якості коду
08:29 - 09:02 Приклад оформлення
09:02 - 09:33 Висновки
09:33 Використані джерела
________________
ДОДАТОК Б
Слайди презентації


  

Рисунок Б.1 - Титульна сторінка
  

Рисунок Б.2 - Зміст
  

Рисунок Б.3 - Вступ
  

Рисунок Б.4 - Важливість правил оформлення коду
  

Рисунок Б.5 - Структура PHP файлу


  

Рисунок Б.6 - Форматування коду
  

Рисунок Б.7 - Правила іменування
  

Рисунок Б.8 - Коментарі та документування коду
  

Рисунок Б.9 - Специфічні конвенції мови PHP
  

Рисунок Б.10 - Взаємодія PSR-12 та Test-Driven Development (TDD)
  

Рисунок Б.11 - Інструменти та автоматизація для підтримки якості коду
  

Рисунок Б.12 - Приклад оформлення
  

Рисунок Б.13 - Висновки
  

Рисунок Б.14 - Використані джерела
